@misc{dwarf,
    title        = {The DWARF Debugging Standard},
    url          = {https://dwarfstd.org/},
    howpublished = {online},
    citedate     = {2022/09/24}
}

@misc{ptrace,
    title        = {Linux Programmer's Manual - PTRACE(2)},
    url          = {https://man7.org/linux/man-pages/man2/ptrace.2.html},
    howpublished = {online},
    citedate     = {2022/09/24}
}

@misc{signals,
    title        = {Linux Programmer's Manual - signal(7)},
    url          = {https://man7.org/linux/man-pages/man7/signal.7.html},
    howpublished = {online},
    citedate     = {2022/02/04}
}

@misc{execve,
    title        = {Linux Programmer's Manual - execve(7)},
    url          = {https://man7.org/linux/man-pages/man2/execve.2.html},
    howpublished = {online},
    citedate     = {2022/02/04}
}

@misc{linux-debugger-blog,
    title        = {Writing a Linux Debugger},
    url          = {https://blog.tartanllama.xyz/writing-a-linux-debugger-setup/},
    howpublished = {online},
    citedate     = {2022/02/07}
}

@misc{linuxkernel-trapflag,
    title        = {Linux Kernel source code - Trap flag usage},
    url          = {https://elixir.bootlin.com/linux/v6.1.8/source/arch/x86/kernel/step.c\#L133},
    howpublished = {online},
    citedate     = {2022/02/05}
}

@misc{lldb,
    title        = {LLDB Homepage},
    url          = {https://lldb.llvm.org},
    howpublished = {online},
    citedate     = {2022/02/05}
}

@article{software-debugging-testing-verification,
    author  = {Hailpern, B. and Santhanam, P.},
    journal = {IBM Systems Journal},
    title   = {Software debugging, testing, and verification},
    year    = {2002},
    volume  = {41},
    number  = {1},
    pages   = {4-12},
    doi     = {10.1147/sj.411.0004}
}

@misc{windows-msdn-debugging-api,
    title        = {msdn - the debugging application programming interface},
    url          = {https://learn.microsoft.com/en-us/previous-versions/ms809754(v=msdn.10)},
    howpublished = {online},
    citedate     = {2022/12/30},
}

@misc{windows-press-debugging-api,
    title        = {How Windows Debuggers Work},
    url          = {https://www.microsoftpressstore.com/articles/article.aspx?p=2201303},
    howpublished = {online},
    citedate     = {2022/12/30},
}

@misc{windows-msdn-seh,
    title        = {Microsoft Learn - Structured Exception Handling},
    url          = {https://learn.microsoft.com/en-us/windows/win32/debug/structured-exception-handling},
    howpublished = {online},
    citedate     = {2023/1/1},
}

@misc{windows-msdn-dbg-exc-handling,
    title        = {Microsoft Learn - Debugger Exception Handling},
    url          = {https://learn.microsoft.com/en-us/windows/win32/debug/debugger-exception-handling},
    howpublished = {online},
    citedate     = {2023/1/1},
}

@misc{windows-msdn-debug-events,
    title        = {Microsoft Learn - Debug Events},
    url          = {https://learn.microsoft.com/en-us/windows/win32/debug/debugging-events},
    howpublished = {online},
    citedate     = {2023/1/1},
}

@book{modern-os,
  title={Modern operating systems},
  author={Tanenbaum, Andrew},
  year={2009},
  publisher={Pearson Education, Inc.,}
}

@book{human-error,
  title={Human error},
  author={Reason, James},
  year={1990},
  publisher={Cambridge university press}
}

@article{bugs-by-language,
author = {Ray, Baishakhi and Posnett, Daryl and Devanbu, Premkumar and Filkov, Vladimir},
title = {A Large-Scale Study of Programming Languages and Code Quality in GitHub},
year = {2017},
issue_date = {October 2017},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {60},
number = {10},
issn = {0001-0782},
url = {https://doi.org/10.1145/3126905},
doi = {10.1145/3126905},
journal = {Commun. ACM},
month = {sep},
pages = {91–100},
numpages = {10}
}

@article{bugs-by-language-2,
author = {Berger, Emery D. and Hollenbeck, Celeste and Maj, Petr and Vitek, Olga and Vitek, Jan},
title = {On the Impact of Programming Languages on Code Quality: A Reproduction Study},
year = {2019},
issue_date = {December 2019},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {41},
number = {4},
issn = {0164-0925},
url = {https://doi.org/10.1145/3340571},
doi = {10.1145/3340571},
month = {oct},
articleno = {21},
numpages = {24},
keywords = {Programming Languages on Code Quality}
}

@inproceedings{undefined-behavior,
author = {Wang, Xi and Chen, Haogang and Cheung, Alvin and Jia, Zhihao and Zeldovich, Nickolai and Kaashoek, M. Frans},
title = {Undefined Behavior: What Happened to My Code?},
year = {2012},
isbn = {9781450316699},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2349896.2349905},
doi = {10.1145/2349896.2349905},
abstract = {System programming languages such as C grant compiler writers freedom to generate efficient code for a specific instruction set by defining certain language constructs as undefined behavior. Unfortunately, the rules for what is undefined behavior are subtle and programmers make mistakes that sometimes lead to security vulnerabilities. This position paper argues that the research community should help address the problems that arise from undefined behavior, and not dismiss them as esoteric C implementation issues. We show that these errors do happen in real-world systems, that the issues are tricky, and that current practices to address the issues are insufficient.},
booktitle = {Proceedings of the Asia-Pacific Workshop on Systems},
articleno = {9},
numpages = {7},
location = {Seoul, Republic of Korea},
series = {APSYS '12}
}

@article{Debugging-difference-between-expert-and-novice,
title = {Expertise in debugging computer programs: A process analysis},
journal = {International Journal of Man-Machine Studies},
volume = {23},
number = {5},
pages = {459-494},
year = {1985},
issn = {0020-7373},
doi = {https://doi.org/10.1016/S0020-7373(85)80054-7},
url = {https://www.sciencedirect.com/science/article/pii/S0020737385800547},
author = {Iris Vessey},
}

@book{zeller2009programs,
  title={Why programs fail: a guide to systematic debugging},
  author={Zeller, Andreas},
  year={2009},
  publisher={Elsevier}
}

@INPROCEEDINGS{debugging-inputs,
  author={Kirschner, Lukas and Soremekun, Ezekiel and Zeller, Andreas},
  booktitle={2020 IEEE/ACM 42nd International Conference on Software Engineering (ICSE)}, 
  title={Debugging Inputs}, 
  year={2020},
  volume={},
  number={},
  pages={75-86},
  doi={10.1145/3377811.3380329}
}

@book{dragon-book,
  title={Compilers: principles, techniques, \& tools},
  author={Aho, Alfred V and Lam, Monica S and Sethi, Ravi and Ullman, Jeffrey D},
  year={2007},
  publisher={Pearson Education India}
}

@INPROCEEDINGS{llvm,
  author={Lattner, C. and Adve, V.},
  booktitle={International Symposium on Code Generation and Optimization, 2004. CGO 2004.}, 
  title={LLVM: a compilation framework for lifelong program analysis \& transformation}, 
  year={2004},
  volume={},
  number={},
  pages={75-86},
  doi={10.1109/CGO.2004.1281665}}


@misc{linux-source,
    title        = {Linux kernel github repository},
    url          = {https://github.com/torvalds/linux},
    howpublished = {online},
    citedate     = {2023/1/1},
}

@article{jit,
author = {Aycock, John},
title = {A Brief History of Just-in-Time},
year = {2003},
issue_date = {June 2003},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {35},
number = {2},
issn = {0360-0300},
url = {https://doi.org/10.1145/857076.857077},
doi = {10.1145/857076.857077},
abstract = {Software systems have been using "just-in-time" compilation (JIT) techniques since the 1960s. Broadly, JIT compilation includes any translation performed dynamically, after a program has started execution. We examine the motivation behind JIT compilation and constraints imposed on JIT compilation systems, and present a classification scheme for such systems. This classification emerges as we survey forty years of JIT work, from 1960--2000.},
journal = {ACM Comput. Surv.},
month = {jun},
pages = {97–113},
numpages = {17},
keywords = {dynamic compilation, Just-in-time compilation}
}


@article{gotobad,
  title={Letters to the editor: go to statement considered harmful},
  author={Dijkstra, Edsger W},
  journal={Communications of the ACM},
  volume={11},
  number={3},
  pages={147--148},
  year={1968},
  publisher={ACM New York, NY, USA}
}

@misc{aps-isa,
    author = {Tvrdík, Pavel and Štepanovský, Michal},
    title = {Architectures of Computer Systems, Lecture 1},
    year = {2022},
    howpublished = {FIT, CTU},
    note = {lecture slides},
}

@misc{aps-interrupts,
    author = {Tvrdík, Pavel and Štepanovský, Michal},
    title = {Architectures of Computer Systems, Lecture 5},
    year = {2022},
    howpublished = {FIT, CTU},
    note = {lecture slides},
}

@misc{intel-manual,
    title = {Intel® 64 and IA-32 Architectures Software Developer's Manual Volume 1: Basic Architecture},
    howpublished = {online},
    url = {https://cdrdv2.intel.com/v1/dl/getContent/671436},
    citedate = {2022/1/29},
}


@INPROCEEDINGS{riscvscisc1,
  author={Blem, Emily and Menon, Jaikrishnan and Sankaralingam, Karthikeyan},
  booktitle={2013 IEEE 19th International Symposium on High Performance Computer Architecture (HPCA)}, 
  title={Power struggles: Revisiting the RISC vs. CISC debate on contemporary ARM and x86 architectures}, 
  year={2013},
  volume={},
  number={},
  pages={1-12},
  doi={10.1109/HPCA.2013.6522302}
}

@article{riscvscisc2,
author = {Blem, Emily and Menon, Jaikrishnan and Vijayaraghavan, Thiruvengadam and Sankaralingam, Karthikeyan},
title = {ISA Wars: Understanding the Relevance of ISA Being RISC or CISC to Performance, Power, and Energy on Modern Architectures},
year = {2015},
issue_date = {March 2015},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {33},
number = {1},
issn = {0734-2071},
url = {https://doi.org/10.1145/2699682},
doi = {10.1145/2699682},
abstract = {RISC versus CISC wars raged in the 1980s when chip area and processor design complexity were the primary constraints and desktops and servers exclusively dominated the computing landscape. Today, energy and power are the primary design constraints and the computing landscape is significantly different: Growth in tablets and smartphones running ARM (a RISC ISA) is surpassing that of desktops and laptops running x86 (a CISC ISA). Furthermore, the traditionally low-power ARM ISA is entering the high-performance server market, while the traditionally high-performance x86 ISA is entering the mobile low-power device market. Thus, the question of whether ISA plays an intrinsic role in performance or energy efficiency is becoming important again, and we seek to answer this question through a detailed measurement-based study on real hardware running real applications. We analyze measurements on seven platforms spanning three ISAs (MIPS, ARM, and x86) over workloads spanning mobile, desktop, and server computing. Our methodical investigation demonstrates the role of ISA in modern microprocessors’ performance and energy efficiency. We find that ARM, MIPS, and x86 processors are simply engineering design points optimized for different levels of performance, and there is nothing fundamentally more energy efficient in one ISA class or the other. The ISA being RISC or CISC seems irrelevant.},
journal = {ACM Trans. Comput. Syst.},
month = {mar},
articleno = {3},
numpages = {34},
keywords = {energy efficiency, Power, technology scaling}
}

@book{os-concepts,
  title={Operating system concepts},
  author={Peterson, James L and Silberschatz, Abraham},
  year={1985},
  publisher={Addison-Wesley Longman Publishing Co., Inc.}
}
